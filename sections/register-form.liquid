{{ 'customer.css' | asset_url | stylesheet_tag }}
{{ 'section-contact-form.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<div class="customer register section-{{ section.id }}-padding">
  <svg style="display: none">
    <symbol id="icon-error" viewBox="0 0 13 13">
      <circle
        cx="6.5"
        cy="6.50049"
        r="5.5"
        stroke="white"
        stroke-width="2" />
      <circle
        cx="6.5"
        cy="6.5"
        r="5.5"
        fill="#EB001B"
        stroke="#EB001B"
        stroke-width="0.7" />
      <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white" />
      <path
        d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z"
        fill="white"
        stroke="#EB001B"
        stroke-width="0.7">
    </symbol>
  </svg>
  <h1>One time registration</h1>
  <span id="message"></span>
  <form id="register-customer-form">
    <div class="contact__fields">
      <div class="field">
        <input
          type="text"
          name="first_name"
          id="RegisterForm-FirstName"
          autocomplete="given-name"
          placeholder="First name"
          class="field__input"
        >
        <label for="RegisterForm-FirstName"> First name </label>
      </div>
      <div class="field">
        <input
          type="text"
          name="last_name"
          id="RegisterForm-LastName"
          autocomplete="given-name"
          placeholder="Last name"
          class="field__input"
        >
        <label for="RegisterForm-LastName"> Last name </label>
      </div>
    </div>
    <div class="field">
      <input
        type="email"
        name="email"
        id="RegisterForm-email"
        spellcheck="false"
        autocapitalize="off"
        autocomplete="email"
        aria-required="true"
        class="field__input"
        placeholder="Email"
      >
      <label for="RegisterForm-email"> Email </label>
    </div>
    <div class="field">
      <input
        type="tel"
        id="RegisterForm-phone"
        class="field__input"
        autocomplete="tel"
        name="phone_number"
        pattern="[0-9\-]*"
        placeholder="Phone number"
      >
      <label for="RegisterForm-phone"> Phone number </label>
    </div>
    <div class="field">
      <input
        type="password"
        id="RegisterForm-password"
        class="field__input"
        name="Password"
        placeholder="Password"
      >
      <label for="RegisterForm-password"> Password </label>
    </div>
    <div class="field">
      <input
        type="password"
        id="RegisterForm-confirm-password"
        class="field__input"
        name="Confirm Password"
        placeholder="Confirm Password"
      >
      <label for="RegisterForm-confirm-password">Confirm password </label>
    </div>
    <button
      class="contact__button"
      type="submit"
      id="register-button"
    >
      Submit
    </button>
  </form>
</div>

<script defer>
  document.getElementById('register-customer-form').addEventListener('submit', async function (event) {
    event.preventDefault();
    const form = event.target;
    try {
      form.querySelector('#register-button').setAttribute('disabled', 'disabled');
      form.querySelectorAll('input').forEach((input) => input.setAttribute('disabled', 'disabled'));

      const firstName = form.querySelector('#RegisterForm-FirstName').value;
      const lastName = form.querySelector('#RegisterForm-LastName').value;
      const email = form.querySelector('#RegisterForm-email').value;
      const phoneNumber = form.querySelector('#RegisterForm-phone').value;
      const password = form.querySelector('#RegisterForm-password').value;
      const passwordConfirm = form.querySelector('#RegisterForm-confirm-password').value;
    if(password !== passwordConfirm){
        document.getElementById('message').innerText = 'Passwords do not match';
        document.querySelector('#register-button').removeAttribute('disabled');
        document.querySelectorAll('input').forEach((input) => input.removeAttribute('disabled'));
        return;
    }
      // Define the GraphQL query as a string
      const query = `
            mutation customerCreate($input: CustomerCreateInput!) {
                customerCreate(input:$input) {
                    userErrors {
                        field
                        message
                    }
                    customer {
                        email
                        phone
                        firstName
                        lastName
                    }
                }
            }
        `;

      // Construct the variables object
      const variables = {
        input: {
          email: email,
          phone: phoneNumber,
          firstName: firstName,
          lastName: lastName,
          password: password
        },
      };

      const publicKey = '9a9c4222636fddbabadcde46e348f1b2';

      // Make the fetch request with the query and variables
      const response = await fetch('https://john-onyango-test.myshopify.com/api/2024-07/graphql.json', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Storefront-Access-Token': publicKey,
        },
        body: JSON.stringify({ query, variables }),
      });

      const result = await response.json();

      if (result.errors) {
        document.getElementById('message').innerText = result.errors.map((error) => error.message).join(', ');
      } else if (result.data.customerCreate.userErrors.length) {
        document.getElementById('message').innerText = result.data.customerCreate.userErrors
          .map((error) => error.message)
          .join(', ');
      } else {
        document.getElementById('message').innerText = 'Account created successfully!';
      }

      document.querySelector('#register-button').removeAttribute('disabled');
      document.querySelectorAll('input').forEach((input) => input.removeAttribute('disabled'));
    } catch (error) {
      console.error('Error creating customer:', error);
      document.getElementById('message').innerText = 'An error occurred. Please try again.';
      document.querySelector('#register-button').removeAttribute('disabled');
      document.querySelectorAll('input').forEach((input) => input.removeAttribute('disabled'));
    }
  });
</script>

{% schema %}
{
  "name": "register-form",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "register-form"
    }
  ]
}
{% endschema %}
